# src/prepare_columns.py
"""
===========================================================
 Module : prepare_columns.py
 Projet : Football Performance Analytics (PySpark)
 √âtape 2 : Cr√©ation des colonnes indicatrices
===========================================================

üéØ Objectif :
Ajouter des colonnes d√©riv√©es bas√©es sur le r√©sultat final du match :
    - HomeTeamWin : 1 si victoire de l'√©quipe √† domicile, 0 sinon
    - AwayTeamWin : 1 si victoire de l'√©quipe √† l'ext√©rieur, 0 sinon
    - GameTie     : 1 si match nul, 0 sinon

Les colonnes sont ensuite valid√©es pour s'assurer de leur coh√©rence :
    - Une seule des trois colonnes doit valoir 1 par match.
    - Aucun match ne doit √™tre non cat√©goris√©.
-----------------------------------------------------------
"""

from pyspark.sql import DataFrame
from pyspark.sql import functions as F


def add_result_indicators(df: DataFrame) -> DataFrame:
    """
    Ajoute les colonnes indicatrices HomeTeamWin, AwayTeamWin et GameTie
    en fonction de la colonne FinalResult (H, A, D).

    Args:
        df (DataFrame): DataFrame contenant la colonne 'FinalResult'

    Returns:
        DataFrame: DataFrame enrichi avec les nouvelles colonnes.
    """
    df_indicators = (
        df.withColumn("HomeTeamWin", F.when(F.col("FinalResult") == "H", 1).otherwise(0))
          .withColumn("AwayTeamWin", F.when(F.col("FinalResult") == "A", 1).otherwise(0))
          .withColumn("GameTie", F.when(F.col("FinalResult") == "D", 1).otherwise(0))
    )
    return df_indicators


def verify_result_consistency(df: DataFrame) -> None:
    """
    V√©rifie la coh√©rence logique entre les colonnes indicatrices.

    L√®ve une exception si :
        - plus d‚Äôune colonne indicatrice vaut 1 sur une m√™me ligne
        - aucune colonne indicatrice ne vaut 1

    Args:
        df (DataFrame): DataFrame contenant HomeTeamWin, AwayTeamWin, GameTie

    Raises:
        ValueError: Si des incoh√©rences sont d√©tect√©es.
    """
    df_check = (
        df.withColumn("sum_flags", F.col("HomeTeamWin") + F.col("AwayTeamWin") + F.col("GameTie"))
    )

    inconsistent = df_check.filter((F.col("sum_flags") != 1))
    nb_inconsistent = inconsistent.count()

    if nb_inconsistent > 0:
        raise ValueError(
            f"Incoh√©rence d√©tect√©e dans {nb_inconsistent} lignes : "
            f"chaque match doit avoir exactement un indicateur √©gal √† 1."
        )


def prepare_match_indicators(df: DataFrame) -> DataFrame:
    """
    Pipeline complet de pr√©paration des colonnes indicatrices.

    √âtapes :
        1. Ajouter les colonnes HomeTeamWin, AwayTeamWin, GameTie
        2. V√©rifier la coh√©rence des r√©sultats

    Args:
        df (DataFrame): DataFrame brut contenant la colonne FinalResult

    Returns:
        DataFrame: DataFrame final pr√™t pour l‚Äôanalyse.
    """
    df_with_indicators = add_result_indicators(df)
    verify_result_consistency(df_with_indicators)
    return df_with_indicators
